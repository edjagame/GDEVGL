/******************************************************************************
 * This demo draws a somewhat familiar geometric object composed of three
 * triangles.
 *
 * The main differences between this demo and the previous demo are:
 * - Each vertex now defines two subcomponents: position and color.
 * - Instead of defining the same vertices multiple times for different
 *   triangles, we now define the triangles using vertex indices instead,
 *   thereby making more efficient use of GPU memory. The indices are
 *   uploaded to the GPU using an Element Buffer Object (EBO).
 * - A uniform variable is introduced to the shader program, which is used to
 *   accomplish a glowing effect.
 *
 * Happy hacking! - eric
 *****************************************************************************/

#include <iostream>
#include <vector>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/gtc/type_ptr.hpp>
#include <gdev.h>

// change this to your desired window attributes
#define WINDOW_WIDTH  800
#define WINDOW_HEIGHT 800
#define WINDOW_TITLE  "CRYO VISION"
#define I_CENTER 0
#define I_HEXAGON 6
GLFWwindow *pWindow;

// define a vertex array to hold our vertices


float vertices[] =
    {
//Ring 1
 0.0000,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.5000, //0
 0.2500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.6667,  0.5000, //1
 0.2452,  0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.6635,  0.5325, //2
 0.2310,  0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.6540,  0.5638, //3
 0.2079,  0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.6386,  0.5926, //4
 0.1768,  0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.6179,  0.6179, //5
 0.1389,  0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.5926,  0.6386, //6
 0.0957,  0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.5638,  0.6540, //7
 0.0488,  0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.5325,  0.6635, //8
 0.0000,  0.2500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.6667, //9
-0.0488,  0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.4675,  0.6635, //10
-0.0957,  0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.4362,  0.6540, //11
-0.1389,  0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.4074,  0.6386, //12
-0.1768,  0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.3821,  0.6179, //13
-0.2079,  0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.3614,  0.5926, //14
-0.2310,  0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.3460,  0.5638, //15
-0.2452,  0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.3365,  0.5325, //16
-0.2500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.3333,  0.5000, //17
-0.2452, -0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.3365,  0.4675, //18
-0.2310, -0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.3460,  0.4362, //19
-0.2079, -0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.3614,  0.4074, //20
-0.1768, -0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.3821,  0.3821, //21
-0.1389, -0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.4074,  0.3614, //22
-0.0957, -0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.4362,  0.3460, //23
-0.0488, -0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.4675,  0.3365, //24
-0.0000, -0.2500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.3333, //25
 0.0488, -0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.5325,  0.3365, //26
 0.0957, -0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.5638,  0.3460, //27
 0.1389, -0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.5926,  0.3614, //28
 0.1768, -0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.6179,  0.3821, //29
 0.2079, -0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.6386,  0.4074, //30
 0.2310, -0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.6540,  0.4362, //31
 0.2452, -0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.6635,  0.4675, //32

//----------------Ring 2----------------//

//1st Half Inner
 0.2500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.6667,  0.5000, //33
 0.2452,  0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.6635,  0.5325, //34
 0.2310,  0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.6540,  0.5638, //35
 0.2079,  0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.6386,  0.5926, //36
 0.1768,  0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.6179,  0.6179, //37
 0.1389,  0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.5926,  0.6386, //38
 0.0957,  0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.5638,  0.6540, //39
 0.0488,  0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.5325,  0.6635, //40
 0.0000,  0.2500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.6667, //41
-0.0488,  0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.4675,  0.6635, //42
-0.0957,  0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.4362,  0.6540, //43
-0.1389,  0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.4074,  0.6386, //44
-0.1768,  0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.3821,  0.6179, //45
-0.2079,  0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.3614,  0.5926, //46
-0.2310,  0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.3460,  0.5638, //47
-0.2452,  0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.3365,  0.5325, //48
-0.2500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.3333,  0.5000, //49

//1st Half Outer
 0.5000,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.8333,  0.5000, //50
 0.4904,  0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.8269,  0.5650, //51
 0.4619,  0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.8080,  0.6276, //52
 0.4157,  0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.7772,  0.6852, //53
 0.3536,  0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.7357,  0.7357, //54
 0.2778,  0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.6852,  0.7772, //55
 0.1913,  0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.6276,  0.8080, //56
 0.0975,  0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.5650,  0.8269, //57
 0.0000,  0.5000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.8333, //58
-0.0975,  0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.4350,  0.8269, //59
-0.1913,  0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.3724,  0.8080, //60
-0.2778,  0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.3148,  0.7772, //61
-0.3536,  0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.2643,  0.7357, //62
-0.4157,  0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.2228,  0.6852, //63
-0.4619,  0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.1920,  0.6276, //64
-0.4904,  0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.1731,  0.5650, //65
-0.5000,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.1667,  0.5000, //66

//2nd Half Inner
-0.2500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.3333,     0.5, //67
-0.2452, -0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.3365,  0.4675, //68
-0.2310, -0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.3460,  0.4362, //69
-0.2079, -0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.3614,  0.4074, //70
-0.1768, -0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.3821,  0.3821, //71
-0.1389, -0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.4074,  0.3614, //72
-0.0957, -0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.4362,   0.346, //73
-0.0488, -0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.4675,  0.3365, //74
-0.0000, -0.2500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.3333, //75
 0.0488, -0.2452, 0.000f, 1.0f, 1.0f, 1.0f,  0.5325,  0.3365, //76
 0.0957, -0.2310, 0.000f, 1.0f, 1.0f, 1.0f,  0.5638,   0.346, //77
 0.1389, -0.2079, 0.000f, 1.0f, 1.0f, 1.0f,  0.5926,  0.3614, //78
 0.1768, -0.1768, 0.000f, 1.0f, 1.0f, 1.0f,  0.6179,  0.3821, //79
 0.2079, -0.1389, 0.000f, 1.0f, 1.0f, 1.0f,  0.6386,  0.4074, //80
 0.2310, -0.0957, 0.000f, 1.0f, 1.0f, 1.0f,  0.6540,  0.4362, //81
 0.2452, -0.0488, 0.000f, 1.0f, 1.0f, 1.0f,  0.6635,  0.4675, //82
 0.2500, -0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.6667,     0.5, //83

//2nd Half Outer
-0.5000,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.1667,  0.5000, //84
-0.4904, -0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.1731,  0.4350, //85
-0.4619, -0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.1920,  0.3724, //86
-0.4157, -0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.2228,  0.3148, //87
-0.3536, -0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.2643,  0.2643, //88
-0.2778, -0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.3148,  0.2228, //89
-0.1913, -0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.3724,  0.1920, //90
-0.0975, -0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.4350,  0.1731, //91
-0.0000, -0.5000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.1667, //92
 0.0975, -0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.5650,  0.1731, //93
 0.1913, -0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.6276,  0.1920, //94
 0.2778, -0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.6852,  0.2228, //95
 0.3536, -0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.7357,  0.2643, //96
 0.4157, -0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.7772,  0.3148, //97
 0.4619, -0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.8080,  0.3724, //98
 0.4904, -0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.8269,  0.4350, //99
 0.5000, -0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.8333,  0.5000, //100

//----------------Ring 3----------------//

//1st Half Inner
 0.0000,  0.5000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.8333, //101
-0.0975,  0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.4350,  0.8269, //102
-0.1913,  0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.3724,  0.8080, //103
-0.2778,  0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.3148,  0.7772, //104
-0.3536,  0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.2643,  0.7357, //105
-0.4157,  0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.2228,  0.6852, //106
-0.4619,  0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.1920,  0.6276, //107
-0.4904,  0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.1731,  0.5650, //108
-0.5000,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.1667,  0.5000, //109
-0.4904, -0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.1731,  0.4350, //110
-0.4619, -0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.1920,  0.3724, //111
-0.4157, -0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.2228,  0.3148, //112
-0.3536, -0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.2643,  0.2643, //113
-0.2778, -0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.3148,  0.2228, //114
-0.1913, -0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.3724,  0.1920, //115
-0.0975, -0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.4350,  0.1731, //116
-0.0000, -0.5000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.1667, //117

//1st Half Outer
 0.0000,  0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  1.0000, //118
-0.1463,  0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.4025,  0.9904, //119
-0.2870,  0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.3087,  0.9619, //120
-0.4167,  0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.2222,  0.9157, //121
-0.5303,  0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.1464,  0.8536, //122
-0.6236,  0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.0843,  0.7778, //123
-0.6929,  0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.0381,  0.6913, //124
-0.7356,  0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.0096,  0.5975, //125
-0.7500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.0000,  0.5000, //126
-0.7356, -0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.0096,  0.4025, //127
-0.6929, -0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.0381,  0.3087, //128
-0.6236, -0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.0843,  0.2222, //129
-0.5303, -0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.1464,  0.1464, //130
-0.4167, -0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.2222,  0.0843, //131
-0.2870, -0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.3087,  0.0381, //132
-0.1463, -0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.4025,  0.0096, //133
-0.0000, -0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.0000, //134

//2nd Half Inner
-0.0000, -0.5000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.1667, //135
 0.0975, -0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.5650,  0.1731, //136
 0.1913, -0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.6276,  0.1920, //137
 0.2778, -0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.6852,  0.2228, //138
 0.3536, -0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.7357,  0.2643, //139
 0.4157, -0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.7772,  0.3148, //140
 0.4619, -0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.8080,  0.3724, //141
 0.4904, -0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.8269,  0.4350, //142
 0.5000,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.8333,  0.5000, //143
 0.4904,  0.0975, 0.000f, 1.0f, 1.0f, 1.0f,  0.8269,  0.5650, //144
 0.4619,  0.1913, 0.000f, 1.0f, 1.0f, 1.0f,  0.8080,  0.6276, //145
 0.4157,  0.2778, 0.000f, 1.0f, 1.0f, 1.0f,  0.7772,  0.6852, //146
 0.3536,  0.3536, 0.000f, 1.0f, 1.0f, 1.0f,  0.7357,  0.7357, //147
 0.2778,  0.4157, 0.000f, 1.0f, 1.0f, 1.0f,  0.6852,  0.7772, //148
 0.1913,  0.4619, 0.000f, 1.0f, 1.0f, 1.0f,  0.6276,  0.8080, //149
 0.0975,  0.4904, 0.000f, 1.0f, 1.0f, 1.0f,  0.5650,  0.8269, //150
 0.0000,  0.5000, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.8333, //151

//2nd Half Outer
-0.0000, -0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.0000, //152
 0.1463, -0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.5975,  0.0096, //153
 0.2870, -0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.6913,  0.0381, //154
 0.4167, -0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.7778,  0.0843, //155
 0.5303, -0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.8536,  0.1464, //156
 0.6236, -0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.9157,  0.2222, //157
 0.6929, -0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.9619,  0.3087, //158
 0.7356, -0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.9904,  0.4025, //159
 0.7500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  1.0000,  0.5000, //160
 0.7356,  0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.9904,  0.5975, //161
 0.6929,  0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.9619,  0.6913, //162
 0.6236,  0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.9157,  0.7778, //163
 0.5303,  0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.8536,  0.8536, //164
 0.4167,  0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.7778,  0.9157, //165
 0.2870,  0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.6913,  0.9619, //166
 0.1463,  0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.5975,  0.9904, //167
 0.0000,  0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  1.0000, //168

//----------------Corner----------------//
 0.7500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  1.0000,  0.5000, //169
 0.7356,  0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.9904,  0.5975, //170
 0.6929,  0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.9619,  0.6913, //171
 0.6236,  0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.9157,  0.7778, //172
 0.5303,  0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.8536,  0.8536, //173
 0.4167,  0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.7778,  0.9157, //174
 0.2870,  0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.6913,  0.9619, //175
 0.1463,  0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.5975,  0.9904, //176
 0.0000,  0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  1.0000, //177
-0.1463,  0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.4025,  0.9904, //178
-0.2870,  0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.3087,  0.9619, //179
-0.4167,  0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.2222,  0.9157, //180
-0.5303,  0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.1464,  0.8536, //181
-0.6236,  0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.0843,  0.7778, //182
-0.6929,  0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.0381,  0.6913, //183
-0.7356,  0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.0096,  0.5975, //184
-0.7500,  0.0000, 0.000f, 1.0f, 1.0f, 1.0f,  0.0000,  0.5000, //185
-0.7356, -0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.0096,  0.4025, //186
-0.6929, -0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.0381,  0.3087, //187
-0.6236, -0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.0843,  0.2222, //188
-0.5303, -0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.1464,  0.1464, //189
-0.4167, -0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.2222,  0.0843, //190
-0.2870, -0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.3087,  0.0381, //191
-0.1463, -0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.4025,  0.0096, //192
-0.0000, -0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.5000,  0.0000, //193
 0.1463, -0.7356, 0.000f, 1.0f, 1.0f, 1.0f,  0.5975,  0.0096, //194
 0.2870, -0.6929, 0.000f, 1.0f, 1.0f, 1.0f,  0.6913,  0.0381, //195
 0.4167, -0.6236, 0.000f, 1.0f, 1.0f, 1.0f,  0.7778,  0.0843, //196
 0.5303, -0.5303, 0.000f, 1.0f, 1.0f, 1.0f,  0.8536,  0.1464, //197
 0.6236, -0.4167, 0.000f, 1.0f, 1.0f, 1.0f,  0.9157,  0.2222, //198
 0.6929, -0.2870, 0.000f, 1.0f, 1.0f, 1.0f,  0.9619,  0.3087, //199
 0.7356, -0.1463, 0.000f, 1.0f, 1.0f, 1.0f,  0.9904,  0.4025, //200
 0.7500,  0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  1.0000,  1.0000, //201
-0.7500,  0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.0000,  1.0000, //202
-0.7500, -0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  0.0000,  0.0000, //203
 0.7500, -0.7500, 0.000f, 1.0f, 1.0f, 1.0f,  1.0000,  0.0000, //204

};

// define the triangles as triplets of indices into the vertex array
GLuint indices[] = {
//Ring 1
0, 1, 2,
0, 2, 3,
0, 3, 4,
0, 4, 5,
0, 5, 6,
0, 6, 7,
0, 7, 8,
0, 8, 9,
0, 9, 10,
0, 10, 11,
0, 11, 12,
0, 12, 13,
0, 13, 14,
0, 14, 15,
0, 15, 16,
0, 16, 17,
0, 17, 18,
0, 18, 19,
0, 19, 20,
0, 20, 21,
0, 21, 22,
0, 22, 23,
0, 23, 24,
0, 24, 25,
0, 25, 26,
0, 26, 27,
0, 27, 28,
0, 28, 29,
0, 29, 30,
0, 30, 31,
0, 31, 32,
0, 32, 1,

//----------------Ring 2----------------//

//1st Half
33,49,50,
34,50,51,
35,51,52,
36,52,53,
37,53,54,
38,54,55,
39,55,56,
40,56,57,
41,57,58,
42,58,59,
43,59,60,
44,60,61,
45,61,62,
46,62,63,
47,63,64,
48,64,65,
49,65,66,
33,34,50,
34,35,51,
35,36,52,
36,37,53,
37,38,54,
38,39,55,
39,40,56,
40,41,57,
41,42,58,
42,43,59,
43,44,60,
44,45,61,
45,46,62,
46,47,63,
47,48,64,
48,49,65,
49,50,66,

//2nd Half
67,83,84,
68,84,85,
69,85,86,
70,86,87,
71,87,88,
72,88,89,
73,89,90,
74,90,91,
75,91,92,
76,92,93,
77,93,94,
78,94,95,
79,95,96,
80,96,97,
81,97,98,
82,98,99,
83,99,100,
67,68,84,
68,69,85,
69,70,86,
70,71,87,
71,72,88,
72,73,89,
73,74,90,
74,75,91,
75,76,92,
76,77,93,
77,78,94,
78,79,95,
79,80,96,
80,81,97,
81,82,98,
82,83,99,
83,84,100,

//----------------Ring 3----------------//

//1st Half
101,117,118,
102,118,119,
103,119,120,
104,120,121,
105,121,122,
106,122,123,
107,123,124,
108,124,125,
109,125,126,
110,126,127,
111,127,128,
112,128,129,
113,129,130,
114,130,131,
115,131,132,
116,132,133,
117,133,134,
101,102,118,
102,103,119,
103,104,120,
104,105,121,
105,106,122,
106,107,123,
107,108,124,
108,109,125,
109,110,126,
110,111,127,
111,112,128,
112,113,129,
113,114,130,
114,115,131,
115,116,132,
116,117,133,
117,118,134,

//1st Half
135,151,152,
136,152,153,
137,153,154,
138,154,155,
139,155,156,
140,156,157,
141,157,158,
142,158,159,
143,159,160,
144,160,161,
145,161,162,
146,162,163,
147,163,164,
148,164,165,
149,165,166,
150,166,167,
151,167,168,
135,136,152,
136,137,153,
137,138,154,
138,139,155,
139,140,156,
140,141,157,
141,142,158,
142,143,159,
143,144,160,
144,145,161,
145,146,162,
146,147,163,
147,148,164,
148,149,165,
149,150,166,
150,151,167,
151,152,168,

//----------------Corner----------------//
201,169,170,
201,170,171,
201,171,172,
201,172,173,
201,173,174,
201,174,175,
201,175,176,
201,176,177,
202,177,178,
202,178,179,
202,179,180,
202,180,181,
202,181,182,
202,182,183,
202,183,184,
202,184,185,
203,185,186,
203,186,187,
203,187,188,
203,188,189,
203,189,190,
203,190,191,
203,191,192,
203,192,193,
204,193,194,
204,194,195,
204,195,196,
204,196,197,
204,197,198,
204,198,199,
204,199,200,
204,200,169,

};

// define OpenGL object IDs to represent the vertex array and the shader program in the GPU
GLuint vao;         // vertex array object (stores the render state for our vertex array)
GLuint vbo;         // vertex buffer object (reserves GPU memory for our vertex array)
GLuint ebo;         // element buffer object (stores the indices of the vertices to form triangles)
GLuint shader;      // combined vertex and fragment shader

GLuint texture; 

// called by the main function to do initial setup, such as uploading vertex
// arrays, shader programs, etc.; returns true if successful, false otherwise
bool setup()
{
    // generate the VAO, VBO, and EBO objects and store their IDs in vao, vbo, and ebo, respectively
    glGenVertexArrays(1, &vao);
    glGenBuffers(1, &vbo);
    glGenBuffers(1, &ebo);

    // bind the newly-created VAO to make it the current one that OpenGL will apply state changes to
    glBindVertexArray(vao);

    // upload our vertex array data to the newly-created VBO
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    // upload our index array data to the newly-created EBO
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // on the VAO, register the current VBO with the following vertex attribute layout:
    // - the stride length of the vertex array is 6 floats (6 * sizeof(float))
    // - layout location 0 (position) is 3 floats and starts at the first float of the vertex array (offset 0)
    // - layout location 1 (color) is also 3 floats but starts at the fourth float (offset 3 * sizeof(float))
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) (3 * sizeof(float)));
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) (6 * sizeof(float)));

    // enable the layout locations so they can be used by the vertex shader
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);

    //TEXTURE LOAD
    texture = gdevLoadTexture("keqing.png", GL_REPEAT, true, true);
        if (! texture) return false;

    // important: if you have more vertex arrays to draw, make sure you separately define them
    // with unique VAO, VBO, and EBO IDs, and follow the same process above to upload them to the GPU

    // load our shader program
    shader = gdevLoadShader("exer2.vs", "exer2.fs");
    if (! shader)
        return false;

    return true;
}

// called by the main function to do rendering per frame
void render()
{
    // clear the whole frame
    glClearColor(0.0f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // compute a value for the glow amount for this frame
    
    // using our shader program...
    glUseProgram(shader);

    // ... set the uniform variables of the shader...
    // (in this case, simply set the value of the glow)


    //SET THE ACTIVE TEXTURE
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture);


    glBindVertexArray(vao);

    glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(GLuint), GL_UNSIGNED_INT, 0);
}

/*****************************************************************************/

// handler called by GLFW when there is a keyboard event
void handleKeys(GLFWwindow* pWindow, int key, int scancode, int action, int mode)
{
    // pressing Esc closes the window
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(pWindow, GL_TRUE);
}

// handler called by GLFW when the window is resized
void handleResize(GLFWwindow* pWindow, int width, int height)
{
    // tell OpenGL to do its drawing within the entire "client area" (area within the borders) of the window
    glViewport(0, 0, width, height);
}

// main function
int main(int argc, char** argv)
{
    // initialize GLFW and ask for OpenGL 3.3 core
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

    // create a GLFW window with the specified width, height, and title
    pWindow = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_TITLE, NULL, NULL);
    if (! pWindow)
    {
        // gracefully terminate if we cannot create the window
        std::cout << "Cannot create the GLFW window.\n";
        glfwTerminate();
        return -1;
    }

    // make the window the current context of subsequent OpenGL commands,
    // and enable vertical sync and aspect-ratio correction on the GLFW window
    glfwMakeContextCurrent(pWindow);
    glfwSwapInterval(1);
    glfwSetWindowAspectRatio(pWindow, WINDOW_WIDTH, WINDOW_HEIGHT);

    // set up callback functions to handle window system events
    glfwSetKeyCallback(pWindow, handleKeys);
    glfwSetFramebufferSizeCallback(pWindow, handleResize);

    // don't miss any momentary keypresses
    glfwSetInputMode(pWindow, GLFW_STICKY_KEYS, GLFW_TRUE);

    // initialize GLAD, which acts as a library loader for the current OS's native OpenGL library
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);

    // if our initial setup is successful...
    if (setup())
    {
        // do rendering in a loop until the user closes the window
        while (! glfwWindowShouldClose(pWindow))
        {
            // render our next frame
            // (by default, GLFW uses double-buffering with a front and back buffer;
            // all drawing goes to the back buffer, so the frame does not get shown yet)
            render();

            // swap the GLFW front and back buffers to show the next frame
            glfwSwapBuffers(pWindow);

            // process any window events (such as moving, resizing, keyboard presses, etc.)
            glfwPollEvents();
        }
    }

    // gracefully terminate the program
    glfwTerminate();
    return 0;
}
